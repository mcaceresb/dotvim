# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

# sligthly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite.
priority -60

##############
# NICE BOXES #
##############

global !p
import string, vim, random, math

def gen_random(low, high):
	return low + (high - low) * random.random()

def gen_line(ltype):
	if ltype == 'interval':
		i1 = gen_random(40, 60)
		i2 = gen_random(5, 20)
	elif ltype == 'last':
		i1 = gen_random(40, 60)
		i2 = gen_random(20, 40)

	return '%.0f, %.0f' % (i1, i2)

""" Maps a filetype to comment format used for boxes.
Automatically filled during usage"""
_commentDict = { }

def _parse_comments(s):
	""" Parses vim's comments option to extract comment format """
	i = iter(s.split(","))

	rv = []
	try:
		while True:
			# get the flags and text of a comment part
			flags, text = next(i).split(':', 1)

			if len(flags) == 0:
				rv.append((text, text, text, ""))
			# parse 3-part comment, but ignore those with O flag
			# elif 's' in flags and 'O' not in flags:
			elif flags[0] == 's' and 'O' not in flags:
				ctriple = []
				indent = ""

				if flags[-1] in string.digits:
					indent = " " * int(flags[-1])
				ctriple.append(text)

				flags,text = next(i).split(':', 1)
				assert(flags[0] == 'm')
				ctriple.append(text)

				flags,text = next(i).split(':', 1)
				assert(flags[0] == 'e')
				ctriple.append(text)
				ctriple.append(indent)

				rv.append(ctriple)
			# elif 'b' in flags:
			elif flags[0] == 'b':
				if len(text) == 1:
					rv.insert(0, (text,text,text, ""))
	except StopIteration:
		return rv

def _get_comment_format():
	""" Returns a 4-element tuple representing the comment format for
	the current file. """
	return _parse_comments(vim.eval("&comments"))[0]


def make_box(twidth, bwidth=None):
	b, m, e, i = _get_comment_format()
	bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
	sline = b + m + bwidth_inner * m[0] + 2 * m[0]
	nspaces = (bwidth_inner - twidth) // 2
	mlines = i + m + " " + " " * nspaces
	mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
	eline = i + m + bwidth_inner * m[0] + 2 * m[0] + e
	return sline, mlines, mlinee, eline

def foldmarker():
	"Return a tuple of (open fold marker, close fold marker)"
	return vim.eval("&foldmarker").split(",")

def getlinechar():
	b, m, e, i = _get_comment_format()
	sline = b
	eline = i + e
	return b if sline is eline else ' ' + m
endglobal

snippet box "A nice box with the current comment symbol" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0]
snip += box[1]
`${1:content}`!p
box = make_box(len(t[1]))
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet bbox "A nice box over the full width" b
`!p
width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
width = 71
box = make_box(len(t[1]), width)
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]), width)
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet fold "Insert a vim fold marker" b
`!p snip.rv = _get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]`${2:1} `!p snip.rv = _get_comment_format()[2]`
endsnippet

snippet foldc "Insert a vim fold close marker" b
`!p snip.rv = _get_comment_format()[0]` ${2:1}`!p snip.rv = foldmarker()[1]` `!p snip.rv = _get_comment_format()[2]`
endsnippet

snippet foldp "Insert a vim fold marker pair" b
`!p snip.rv = _get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]` `!p snip.rv = _get_comment_format()[2]`
${2:${VISUAL:Content}}
`!p snip.rv = _get_comment_format()[0]` `!p snip.rv = foldmarker()[1]` $1 `!p snip.rv = _get_comment_format()[2]`
endsnippet

##############
#  My Stuff  #
##############

snippet name "My name" w
Mauricio Caceres
endsnippet

snippet email "My Email" w
mauricio.caceres.bravo@gmail.com
endsnippet

snippet namail "Name <e-mail>" w
Mauricio Caceres <mauricio.caceres.bravo@gmail.com>
endsnippet

snippet doyledaily "Daily progress for Doyle" w
From: Mauricio Caceres <mauricio.caceres.bravo@gmail.com>
To: Joseph Doyle <jjdoyle@mit.edu>
Subject: Daily Progress
Date: `date`

Today
1. $0

Tomorrow
1.

Mauricio
endsnippet

snippet mbox "Pretty bbox" b
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
	width = 71
b, m, e, i = _get_comment_format()
sline = b
eline = i + e
if sline is eline:
	snip.rv = sline + ' ' + (width - 2) * '-' + '\n' + sline + ' '
else:
	box = make_box(len(t[1]), width)
	snip.rv = box[0] + '\n' + box[1]`${1:${VISUAL:content}}`!p
width = int(vim.eval("&textwidth")) or 71
width = 71
b, m, e, i = _get_comment_format()
sline = b
eline = i + e
if sline is not eline:
	box = make_box(len(t[1]), width)
	snip.rv = box[2] + '\n' + box[3]`
$0
endsnippet

snippet note "Note message" b
`!p
b, m, e, i = _get_comment_format()
sline = b
snip.rv = sline` NOTE(`echo $USER`): ${1:${VISUAL:note}} // `date +%Y-%m-%d\ %H:%M\ %Z``!p
b, m, e, i = _get_comment_format()
sline = b
eline = i + e
snip.rv = '' if eline is sline else eline`
endsnippet

snippet todo "Todo message" b
`!p
b, m, e, i = _get_comment_format()
sline = b
snip.rv = sline` TODO: ${1:${VISUAL:todo}} // `date +%Y-%m-%d\ %H:%M\ %Z``!p
b, m, e, i = _get_comment_format()
sline = b
eline = i + e
snip.rv = '' if eline is sline else eline`
endsnippet

snippet TODO "Todo message" b
`!p
b, m, e, i = _get_comment_format()
sline = b
snip.rv = sline` TODO(`echo $USER`): ${1:${VISUAL:todo}} // `!v strftime("%c")` `!p
b, m, e, i = _get_comment_format()
sline = b
eline = i + e
snip.rv = '' if eline is sline else eline`
endsnippet

snippet nowa "Current datetime, YYYY.MM.DD HH:MM:SS" w
`!v strftime("%Y.%m.%d %H:%M:%S")`$0
endsnippet

snippet noworg "Date-time stamp for org files" w
<`!v strftime("%Y-%m-%d %a %H:%M")`>$0
endsnippet

snippet today "Current date, YYYYMMDD" w
`!v strftime("%Y%m%d")`$0
endsnippet

snippet todaya "Current date, YYYY-MM-DD" w
`!v strftime("%Y-%m-%d")`$0
endsnippet

snippet todayb "Current date, MM/DD/YYYY" w
`!v strftime("%m/%d/%Y")`$0
endsnippet

snippet todayc "Current date, Mmm DD, CCYY" w
`!v strftime("%b %d, %Y")`$0
endsnippet

snippet todays "Current date, Stata, DDmmmCCYY" w
`!v strftime("%d%b%Y")`$0
endsnippet

snippet proinfo "Project info" b
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
b, m, e, i = _get_comment_format()
sline = b
eline = i + e
if sline is eline:
	snip.rv = sline + ' ' + (width - 2) * '-'
else:
	box = make_box(len(t[1]), width)
	snip.rv = box[0]`
`!p snip.rv = getlinechar()` Project: ${1:${VISUAL:content}}
`!p snip.rv = getlinechar()` Program: ${2:`!v expand('%:t')`}
`!p snip.rv = getlinechar()` Purpose: $3
`!p snip.rv = getlinechar()` Created: ${4:`!v strftime('%c')`}
`!p snip.rv = getlinechar()` Version: ${5:0.1.0}
`!p snip.rv = getlinechar()` Updated: `!v strftime('%c')`
`!p snip.rv = getlinechar()` Author:  ${6:`echo $USER`}
`!p snip.rv = getlinechar()`
`!p snip.rv = getlinechar()` Inputs:
`!p snip.rv = getlinechar()`	$7
`!p snip.rv = getlinechar()`
`!p snip.rv = getlinechar()` Runs:
`!p snip.rv = getlinechar()`	$8
`!p snip.rv = getlinechar()`
`!p snip.rv = getlinechar()` Output:
`!p snip.rv = getlinechar()`	$9`!p
width = int(vim.eval("&textwidth")) or 71
b, m, e, i = _get_comment_format()
sline = b
eline = i + e
if sline is not eline:
	box = make_box(len(t[1]), width)
	snip.rv = '\n' + ' ' + m + box[3][1:]`
$0
endsnippet

snippet standby "Standby Message" b
This project is in standby mode. Very little has been done beyond writing down the idea.
endsnippet

snippet chesspgn "Chess PGN" b
[Event "${1:Friendly}"]
[Site "${2:London, England|ENG}"]
[Date "${3:`!v strftime("%Y.%m.%d")`}"]
[Result "${4:1/2-1/2}"]
[Round "${5:1}"]
[White "${6:House, Gregory}"]
[Black "${7:Holmes, Sherlock}"]
[WhiteElo "${8:3000}"]
[BlackElo "${9:3000}"]

$0
endsnippet

##############
#  Licenses  #
##############

snippet apache2 "Apache license 2.0" b
Copyright ${1:`date +%Y`}, ${2:`echo $USER`}

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License.
endsnippet

snippet bsd3 "BSD 3-clause license" b
Copyright (c) ${1:`date +%Y`}, ${2:`echo $USER`}
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
endsnippet

snippet mit "MIT License" b
Licensed under the MIT License (MIT)

Copyright (c) ${1:`date +%Y`}, ${2:`echo $USER`}

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
endsnippet

##########################
# LOREM IPSUM GENERATORS #
##########################
snippet lorem "Lorem Ipsum - 50 Words" b
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.
endsnippet

##########################
# VIM MODELINE GENERATOR #
##########################
# See advice on `:help 'tabstop'` for why these values are set. Uses second
# modeline form ('set') to work in languages with comment terminators
# (/* like C */).
snippet modeline "Vim modeline"
vim`!v ':set '. (&expandtab ? printf('et sw=%i ts=%i', &sw, &ts) : printf('noet sts=%i sw=%i ts=%i', &sts, &sw, &ts)) . (&tw ? ' tw='. &tw : '') . ':'`
endsnippet

##################
#  Project Docs  #
##################

snippet proheader "Project info" b
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
b, m, e, i = _get_comment_format()
sline = b
eline = i + e
if sline is eline:
	snip.rv = sline + ' ' + (width - 2) * '-'
else:
	box = make_box(len(t[1]), width)
	snip.rv = box[0]`
`!p snip.rv = getlinechar()` Program: ${2:`!v expand('%:t')`}
`!p snip.rv = getlinechar()` Author:  ${3:`echo $USER`} <caceres@nber.org>
`!p snip.rv = getlinechar()` Created: ${4:`date`}
`!p snip.rv = getlinechar()` Updated: `date`
`!p snip.rv = getlinechar()` Purpose: $5
`!p snip.rv = getlinechar()` Note:    $6
$0
endsnippet

snippet progress "Track progress" b
`!v strftime("%a %b %d %Y")` 08:00,
`!v strftime("%a %b %d %Y")` 09:00,
`!v strftime("%a %b %d %Y")` 10:00,
`!v strftime("%a %b %d %Y")` 11:00,
`!v strftime("%a %b %d %Y")` 12:00,
`!v strftime("%a %b %d %Y")` 13:00,
`!v strftime("%a %b %d %Y")` 14:00,
`!v strftime("%a %b %d %Y")` 15:00,
`!v strftime("%a %b %d %Y")` 16:00,
`!v strftime("%a %b %d %Y")` 17:00,
`!v strftime("%a %b %d %Y")` 18:00,
`!v strftime("%a %b %d %Y")` 19:00,
`!v strftime("%a %b %d %Y")` 20:00,
`!v strftime("%a %b %d %Y")` 21:00,
`!v strftime("%a %b %d %Y")` 22:00,
`!v strftime("%a %b %d %Y")` 23:00,
`!v strftime("%a %b %d %Y")` 00:00,
`!v strftime("%a %b %d %Y")` 01:00,
`!v strftime("%a %b %d %Y")` 02:00,
`!v strftime("%a %b %d %Y")` 03:00,
`!v strftime("%a %b %d %Y")` 04:00,
`!v strftime("%a %b %d %Y")` 05:00,
`!v strftime("%a %b %d %Y")` 06:00,
`!v strftime("%a %b %d %Y")` 07:00,
endsnippet

snippet prolog "Project log entry" b
**Event: $1**
Date: `date`
Note: $2
	$0
endsnippet

snippet projectlog "Project Log" b
Project Info
============

$1

Current
=======

1. $2

History
=======

Event: $3
Date: `date`
Note: $4
	$0
endsnippet

##########
#  Misc  #
##########

snippet stuffs "temporary stuffs" b
% Citation: $0

Relevance:

Notes:
\begin{enumerate}
  \item
\end{enumerate}

Conclusions:
\begin{enumerate}
  \item
\end{enumerate}

Critique:
\begin{enumerate}
  \item
\end{enumerate}
endsnippet

snippet () "Braces (...)" i
(${1:${VISUAL}})$0
endsnippet

snippet [] "Brackets [...]" i
[${1:${VISUAL}}]$0
endsnippet

snippet {} "Curly {...}" i
{${1:${VISUAL}}}$0
endsnippet

snippet infojson "Info JSON template" b
{
    "project": "",
    "description": "",
    "status": "",
    "dates": {
        "start": "",
        "involved": "",
        "updated": "",
        "end": ""
    },
    "people": {
        "Joseph Doyle": {
            "role": "Co-investigator",
            "institution": "MIT",
			"title": "PhD",
            "email": "jjdoyle@mit.edu"
        },
        "Mauricio Caceres": {
            "role": "Joseph Doyle's RA",
            "institution": "NBER",
			"title": "MA",
            "email": "caceres@nber"
        }
    },
    "sync": {
        "local": "./",
        "server": "server",
        "remote-full": "/path",
        "remote-partial": "/path",
        "exclude-full": ["data"],
        "include-partial": ["code", "writeup", "admin"]
    },
    "self": {
        "user": "caceres",
        "name": "Mauricio Caceres",
        "role": "Joseph Doyle's RA",
        "email": "caceres@nber.org"
    }
}
endsnippet

snippet rct "Temp for RCTs" b
"${0:${VISUAL:NCT}}":
{
    "Study": "Title",
    "Study Purpose": "Purpose",
    "Study Included for": "Relevance",
    "Study Population": "Target/recruitment population",
    "Study Interventions": ["Arm 1 with incentive name and intervention description",
                            "Arm 2 with incentive name and intervention description",
                            "Control with control description"],
    "Study Time Horizon": "Study duration (possible note) and follow-up horizon",
    "Study Settings": "Clinic|Home|School Cafeteria|etc.",
    "Study Caveats": ["Why the study is not so relevant",
                      "Criticisms of the study",
                      "Actual problems with the study"],
    "Study Tags": "Smoking|Dieting|Exercise|Prevention|Medication Adherence/Management|etc.",
    "Study Articles": "Citation tag from Zotero bib",
    "Incentive": ["Incentive name"],
    "Incentive Type": ["Cash|Vouchers|Gift Cards|Points|Lottery|Peer|Access|Nudge|Subsidy|Contingency Management"],
    "Incentive Frequency": ["Short. Weekly|Monthly|Schedule over X days|etc."],
    "Incentive For": ["Behavior that earns incentive."],
    "Incentive Mechanism": ["Cash|etc. earned at X rate for X behavior, redeemable at X rate"],
    "Incentive Reward": ["Participants could accrue and redeem at any time|Participants could redeem every X weeks|Participants got amount at end of study|Participants got incentive right away"],
    "Incentive For Participating": ["Incentive for showing up"],
    "Incentive Total": ["Total amount possible to earn (perfect behavior)"],
    "Outcome Sample": ["Note|None",
                       "X assessed/recruited",
                       "Y randomized",
                       "Z in results",
                       "A in follow-up|None"],
    "Outcome Measures": ["Measure a",
                         "Measure b"],
    "Outcome Results": ["Smoking = abstinence rate",
                        "Weight = weight loss",
                        "Diet = Healthful food intake per time unit",
                        "Exercise = Physical activity in time units per time unit",
                        "Adherence = % Adhering",
                        "Other conclusions"],
    "Outcome Follow-up": "No follow-up|No drop/minimal drop|Long-run drop",
    "Notes": null,
    "Google Scholar": "Citations from Google Scholar"
},
endsnippet

snippet flat "Fields for flat RCT file" b
{
	, year                ,	year
	, study_source        , study_source
	, study_id            , study_id
	, study_line          , study_line
	, study_gscholar      , study_gscholar
	, study_horizon       , study_horizon
	, study_tags          , study_tags
	, study_settings      , study_settings
	, study_population    , study_population
	, study_which         , study_which
	, treatment_horizon   , treatment_horizon
	, treatment_arm       , treatment_arm
	, treatment_names     , treatment_names
	, treatment_compare   , treatment_compare
	, incentive_frequency , incentive_frequency
	, incentive_caveats   , incentive_caveats
	, incentive_for       , incentive_for
	, incentive_total     , incentive_total
	, incentive_earned    , incentive_earned
	, outcome_primary     , outcome_primary
	, outcome_name        , outcome_name
	, outcome_size        , outcome_size
	, outcome_control     , outcome_control
	, outcome_pval        , outcome_pval
	, outcome_which       , outcome_which
	, outcome_diff        , outcome_diff
	, outcome_pvald       , outcome_pvald
	, itt                 , itt
	, n_randomized        , n_randomized
	, n_results           , n_results
	, n_treat             , n_treat
	, n_treatr            , n_treatr
	, n_retained          , n_retained
	, n_treatret          , n_treatret
	, notes               , notes
	, cites               , cites
}
endsnippet

snippet startwork "Log work for ofl project" b
{
	"schedule": {
		"interval 1": [`!p snip.rv = gen_line('interval')`],
		"interval 2": [`!p snip.rv = gen_line('interval')`],
		"interval 3": [`!p snip.rv = gen_line('last')`],
		"interval 4": [`!p snip.rv = gen_line('interval')`],
		"interval 5": [`!p snip.rv = gen_line('interval')`],
		"interval 6": [`!p snip.rv = gen_line('last')`],
		"interval 7": [`!p snip.rv = gen_line('interval')`],
		"interval 8": [`!p snip.rv = gen_line('interval')`],
		"interval 9": [`!p snip.rv = gen_line('last')`]
	},
	"log": {
	$0
	}
}
endsnippet

snippet logwork "Log work for ofl project" b
"`date`": {
	"end": "",
	"rating": $0,
	"done": ["", ""]
}
endsnippet

###################
#  Tmp 2016-07-19 #
###################

snippet now "Current datetime, ddd DD mmm YYYY HH:MM:SS AM/PM TZ" w
`date`$0
endsnippet

snippet sarah "Description" b
Sarah:
> $0
endsnippet

snippet joe "Description" b
Joe:
> $0
endsnippet

snippet saraha "Description" b
Sarah A:
> $0
endsnippet

snippet laura "Description" b
Laura:
> $0
endsnippet

snippet si "Description" b
Sihang:
> $0
endsnippet

snippet dir "Description" b
Director:
> $0
endsnippet

snippet pat "Description" b
Patrick:
> $0
endsnippet

# vim:ft=snippets:
