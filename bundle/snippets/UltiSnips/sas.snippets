priority -50

####################
#  Python stuffs!  #
####################

global !p
import string, vim

""" Maps a filetype to comment format used for boxes.
Automatically filled during usage"""
_commentDict = { }

def _parse_comments(s):
	""" Parses vim's comments option to extract comment format """
	i = iter(s.split(","))

	rv = []
	try:
		while True:
			# get the flags and text of a comment part
			flags, text = next(i).split(':', 1)

			if len(flags) == 0:
				rv.append((text, text, text, ""))
			# parse 3-part comment, but ignore those with O flag
			# elif 's' in flags and 'O' not in flags:
			elif flags[0] == 's' and 'O' not in flags:
				ctriple = []
				indent = ""

				if flags[-1] in string.digits:
					indent = " " * int(flags[-1])
				ctriple.append(text)

				flags,text = next(i).split(':', 1)
				assert(flags[0] == 'm')
				ctriple.append(text)

				flags,text = next(i).split(':', 1)
				assert(flags[0] == 'e')
				ctriple.append(text)
				ctriple.append(indent)

				rv.append(ctriple)
			# elif 'b' in flags:
			elif flags[0] == 'b':
				if len(text) == 1:
					rv.insert(0, (text,text,text, ""))
	except StopIteration:
		return rv

def _get_comment_format():
	""" Returns a 4-element tuple representing the comment format for
	the current file. """
	return _parse_comments(vim.eval("&comments"))[0]


def make_box(twidth, bwidth=None):
	b, m, e, i = _get_comment_format()
	bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
	sline = b + m + bwidth_inner * m[0] + 2 * m[0]
	nspaces = (bwidth_inner - twidth) // 2
	mlines = i + m + " " + " " * nspaces
	mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
	eline = i + m + bwidth_inner * m[0] + 2 * m[0] + e
	return sline, mlines, mlinee, eline

def foldmarker():
	"Return a tuple of (open fold marker, close fold marker)"
	return vim.eval("&foldmarker").split(",")

def getlinechar():
	b, m, e, i = _get_comment_format()
	sline = b
	eline = i + e
	return b if sline is eline else ' ' + m
endglobal

#############
#  Startup  #
#############

snippet sasproject "SAS Project Template" b
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
width = 71
b, m, e, i = _get_comment_format()
sline = b
eline = i + e
if sline is eline:
	snip.rv = sline + ' ' + (width - 2) * '-'
else:
	box = make_box(len(t[1]), width)
	snip.rv = box[0]`
`!p snip.rv = getlinechar()` Program: ${1:`!v expand('%:t')`}
`!p snip.rv = getlinechar()` Author:  Mauricio Caceres <caceres@nber.org>
`!p snip.rv = getlinechar()` Created: `date`
`!p snip.rv = getlinechar()` Updated: `date`
`!p snip.rv = getlinechar()` Purpose: ${2:${VISUAL:content}}
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
b, m, e, i = _get_comment_format()
sline = b
eline = i + e
if sline is eline:
	snip.rv = sline + ' ' + (width - 2) * '-'
else:
	box = make_box(len(t[1]), width)
	snip.rv = ' ' + box[3]`

dm 'clear log output'; * ods listing;
options
	errors = 20  /* Maximum number of prints of repeat errors    */
	compress = binary /* Compress data using binary compression */
	mprint       /* Print macro output      */
	nomlogic     /* Go through macro logic  */
	mcompilenote = all /* Note on compiled macros */
	nosymbolgen  /* Print macro symbol eval */
	fullstimer   /* Detailed timer after each step execution */
	nonumber     /* Don't print page numbers in SAS log      */
	nodate       /* Don't print SAS date atop each log page  */
;
%let sqlopts = feedback stimer noprint _method;
%let sqlopts = feedback stimer noprint;

%let maindir = /disk/agedisk2/medicare.work/doyle-DUA18266/caceres;
%let bulkdir = /disk/agebulk1/medicare.work/doyle-DUA18266/caceres;
%let outdir  = &maindir/out.;

systask command "mkdir -p &outdir./fig"    wait;
systask command "mkdir -p &outdir./tables" wait;
systask command "mkdir -p &outdir./data"   wait;

libname bulk "&bulkdir." access = readonly;
libname main "&maindir"  access = readonly;

%macro main;
	%let stime = %sysfunc(putn(%sysfunc(datetime()), datetime.));

	/* Program goes here */$0

	%sendMail(&stime.);
%mend main;

/**********************************************************************
 *             Program wrappers, include statements, etc.             *
 **********************************************************************/

/* Programs to run from %main */

/**********************************************************************
 *                             Send email                             *
 **********************************************************************/

%macro sendMail(stime);
	%let prog  = `!v expand('%:r')`;
	%if &syserr. ne 0 %then %do;
		%let paux = ran with errors [Automated Message];
		%let err  = ERROR: %bquote(&SYSERRORTEXT);
		%let warn = WARNING: %bquote(&SYSWARNINGTEXT);
	%end;
	%else %do;
		%let paux = ran [Automated Message];
		%let err  = ;
		%let warn = ;
	%end;
	%let etime = %sysfunc(putn(%sysfunc(datetime()), datetime.));
	%let msg   = &prog. finished running\n&err.\n&warn.\nStart: &stime.\nEnd: &etime.;
	%sysexec echo -e "&msg." | mail -s "&prog. &paux." &sysuserid.@nber.org;
%mend sendMail;

/**********************************************************************
 *                           Run the things                           *
 **********************************************************************/

%main;
endsnippet

snippet sasoptions "basic sas options" w
options
	errors = 20  /* Maximum number of prints of repeat errors    */
	compress = binary /* Compress data using binary compression */
	mprint       /* Print macro output      */
	nomlogic     /* Go through macro logic  */
	mcompilenote = all /* Note on compiled macros */
	nosymbolgen  /* Print macro symbol eval */
	fullstimer   /* Detailed timer after each step execution */
	nonumber     /* Don't print page numbers in SAS log      */
	nodate       /* Don't print SAS date atop each log page  */
;
endsnippet

snippet lib "libname X path;" w
libname ${1:name} "${2:${VISUAL:/path/to/lib}}" ${3:access=readonly};
endsnippet

####################
#  Macro snippets  #
####################

snippet let "%let a=b;" w
%let ${1:macrovar}=${2:${VISUAL:value}};
endsnippet

snippet macro "Create empty macro" b
%macro ${1:tmp}${2:(args)};
${3:${VISUAL}}
%mend $1;
%$1$2;$0
endsnippet

snippet wdir "Working directory" w
%put %sysfunc(getoption(work));
endsnippet

snippet escape "Try to end any unclosed statement" w
*/;
*;
%mend;
run;
quit;
);
*";
*';
%put hi;
endsnippet

##################
#  PROC snipets  #
##################

snippet dhash "Hash merge" b
proc sort data = $3;
	by $5 $6;

data ${1:data_out};
	if _N_ = 1 then do;
		if 0 then set ${3:data_hash};
		declare hash ${4:hash_short}h(dataset: "$3", ordered: "a");
		$4h.definekey("${5:var1}", "${6:var2}");
		$4h.definedata(all: "Y");
		$4h.definedone();
	end;
	set ${2:data_base};
	if $4h.find() = 0 then output;
	/* if $4h.find() ne 0 then call missing(vars of $3); */
run;
endsnippet

snippet pcomp "PROC COMPARE" b
proc sort data = ${1:data_base}; by ${3:_all_};
proc sort data = ${2:data_comp}; by $3;
proc compare
	base    = $1
	compare = $2
	out     = temp_comp
	noprint    /* no ODS */
	outdif     /* output to data */
	outnoequal /* output non-equal */
	nosummary  /* no summary */;
run;
endsnippet

snippet psql "PROC SQL" b
proc sql ${1:&sqlopts};
create table tmp as
	select *
	from ${2:dat};$0
quit;
endsnippet

#################
#  SQL snipets  #
#################

snippet sqlempty "create empty; insert into;" b
create table ${1:empty}(
	${2:numvar} num,
	${3:charvar} char(1));
insert into $1 values(., "");
endsnippet

snippet sqlmacro "select into macro variable" b

endsnippet
